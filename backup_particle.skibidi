#include "particle.hpp"

#include <cstdint>
#include <exception>
#include <limits>
#include <raylib.h>
#include <raymath.h>

#include <print>

#include <sol/raii.hpp>
#include <sol/sol.hpp>
#include <string>

extern "C" __attribute((visibility("default"))) {
#define GET_PTR(name)                                                                                                  \
    auto* get_##name##_ptr(void* p) {                                                                                  \
        return reinterpret_cast<particle_system::Particles*>(p)->name.get();                                           \
    }
    GET_PTR(pos)
    GET_PTR(velocity)
    GET_PTR(acceleration)
    GET_PTR(color)
    GET_PTR(alive)
    GET_PTR(lifetime)
    GET_PTR(size)

    uint64_t get_max_size(void* p) {
        return reinterpret_cast<particle_system::Particles*>(p)->max_size;
    }

    uint64_t get_alive_count(void* p) {
        return reinterpret_cast<particle_system::Particles*>(p)->alive_count;
    }

    void kill_particle(void* p, uint64_t ix) {
        reinterpret_cast<particle_system::Particles*>(p)->kill(ix);
    }

    void wake_particle(void* p, uint64_t ix) {
        reinterpret_cast<particle_system::Particles*>(p)->wake(ix);
    }

    void swap_particle(void* p, uint64_t a, uint64_t b) {
        reinterpret_cast<particle_system::Particles*>(p)->swap(a, b);
    }
#undef GET_PTR
}

struct SystemData {
    std::vector<sol::function> generators;
    std::vector<sol::function> updaters;

    float emit_rate;
    std::size_t max_emit;

    std::size_t max_particles;
    std::optional<std::size_t> reset_on_done;

    Vector3 origin;

    SystemData(std::size_t max_particles, std::optional<std::size_t> reset_on_done, float emit_rate,
               std::size_t max_emit, Vector3 origin)
        : emit_rate(emit_rate), max_emit(max_emit), max_particles(max_particles), reset_on_done(reset_on_done),
          origin(origin) {};

    void print() const {
        std::println("generator count: {}", generators.size());
        std::println("updaters count: {}", updaters.size());
        std::println("emit rate: {}", emit_rate);
        std::println("max emit: {}", max_emit);
        std::println("max_particles: {}", max_particles);
        std::println("reset_on_done: {}", reset_on_done ? std::to_string(*reset_on_done) : "nullopt");
    }

    particle_system::System construct_system() const {
        particle_system::System system(max_particles, particle_system::renderers::Point(max_particles, origin));
        system.reset_on_done = reset_on_done;

        particle_system::emitters::CustomEmitter emitter(emit_rate, max_emit);
        for (const auto& generator : generators) {
            emitter.add_generator([&generator](auto& p, auto dt, auto start_ix, auto end_ix) {
                return generator(reinterpret_cast<uintptr_t>(&p), dt, start_ix, end_ix);
            });
        }

        system.add_emitter(std::move(emitter));

        for (const auto& updater : updaters) {
            system.add_updater([&updater](auto& p, auto dt) { return updater(reinterpret_cast<uintptr_t>(&p), dt); });
        }

        return system;
    }
};

struct LuaState {
    sol::state lua;

    std::vector<SystemData> systems;
    std::vector<particle_system::System> particle_systems;

    Color background_color;
    Color plane_color;

    sol::function tracker;

    LuaState(const char* script_file) {
        lua.open_libraries(sol::lib::base, sol::lib::math, sol::lib::ffi, sol::lib::os);

        lua.new_usertype<Vector3>("Vector3", sol::constructors<Color(), Color(float, float, float)>(), "x", &Vector3::x,
                                  "y", &Vector3::y, "z", &Vector3::z);
        lua.new_usertype<Color>(
            "Color", sol::constructors<Color(), Color(unsigned char, unsigned char, unsigned char, unsigned char)>(),
            "r", &Color::r, "g", &Color::g, "b", &Color::b, "a", &Color::a);

        lua["new_system"] = [&](std::size_t max_particles, Vector3 origin, std::optional<std::size_t> reset_on_done,
                                std::optional<float> emit_rate, std::optional<std::size_t> max_emit) -> std::size_t {
            systems.emplace_back(max_particles, reset_on_done,
                                 emit_rate.value_or(static_cast<float>(std::numeric_limits<std::size_t>::max())),
                                 max_emit.value_or(std::numeric_limits<std::size_t>::max()), origin);

            return systems.size() - 1;
        };

        lua["add_generator"] = [&](sol::function generator, std::size_t system_id) {
            if (systems.size() <= system_id) {
                std::println("ignoring generator, system_id `{}` is invalid", system_id);
                return;
            }

            systems[system_id].generators.emplace_back(std::move(generator));
        };
        lua["add_updater"] = [&](sol::function updater, std::size_t system_id) {
            if (systems.size() <= system_id) {
                std::println("ignoring updater, system_id `{}` is invalid", system_id);
                return;
            }

            systems[system_id].updaters.emplace_back(std::move(updater));
        };

        background_color = DARKGRAY;
        lua["set_background_color"] = [&](Color color) { background_color = color; };

        plane_color = GRAY;
        lua["set_plane_color"] = [&](Color color) { plane_color = color; };

        lua["tracker"] = [&](sol::function f) {
            tracker = f;
        };

        lua.script_file(script_file);
    }

    void construct_particle_systems() {
        for (const auto& system : systems) {
            particle_systems.emplace_back(system.construct_system());
        }
    }
};

int main(int argc, char** argv) {
    LuaState state(argv[1]);

    InitWindow(0, 0, "Particle system");
    SetWindowState(FLAG_FULLSCREEN_MODE);
    DisableCursor();

    state.construct_particle_systems();

    Camera3D cam{};
    cam.position = {0.0f, 10.0f, 30.0f};
    cam.target = Vector3Zero();
    cam.up = {0.0f, 1.0f, 0.0f};
    cam.fovy = 90.0f;
    cam.projection = CAMERA_PERSPECTIVE;

    bool start = false;
    double prev_time = 0.;
    while (!WindowShouldClose()) {
        double current_time = GetTime();
        double delta_time = current_time - prev_time;
        prev_time = current_time;

        PollInputEvents();
        BeginDrawing();
        ClearBackground(state.background_color);
        BeginMode3D(cam);
        DrawSphere(Vector3Zero(), 0.5f, RED);
        DrawPlane(Vector3Zero(), {15000.0f, 15000.0f}, state.plane_color);
        DrawCircle3D(Vector3{0.0f, 0.5f, 0.0f}, 10.0f, {1.0f, 0.0f, 0.0f}, 90.0f, WHITE);
        DrawCircle3D(Vector3{0.0f, 0.5f, 0.0f}, 5.0f, {1.0f, 0.0f, 0.0f}, 90.0f, WHITE);
        EndMode3D();

        BeginMode3D(cam);

        for (auto& particle_system : state.particle_systems) {
            particle_system.draw();
        }

        EndMode3D();

        if (start) DrawText("STARTED", 10, 10, 20, WHITE);
        EndDrawing();
        SwapScreenBuffer();

        if (!start && IsKeyPressed(KEY_SPACE)) {
            start = true;
        }

        if (start) {
            for (auto& particle_system : state.particle_systems) {
                if (!particle_system.update(static_cast<float>(delta_time))) {
                    start = false;
                    particle_system.reset();
                }
            }
        }

        if (IsKeyPressed(KEY_R)) {
            try {
                LuaState new_state(argv[1]);

                state.~LuaState();
                new (&state) LuaState(std::move(new_state));
                state.construct_particle_systems();
            } catch (std::exception e) {
                std::println("Your lua is fucked, I have it printed out");
            }
        }

        if (IsKeyPressed(KEY_T)) {
            state.tracker();
        }


        UpdateCameraPro(&cam,
                        (Vector3){
                            (IsKeyDown(KEY_W) || IsKeyDown(KEY_UP)) * 0.1f - // Move forward-backward
                                (IsKeyDown(KEY_S) || IsKeyDown(KEY_DOWN)) * 0.1f,
                            (IsKeyDown(KEY_D) || IsKeyDown(KEY_RIGHT)) * 0.1f - // Move right-left
                                (IsKeyDown(KEY_A) || IsKeyDown(KEY_LEFT)) * 0.1f,
                            0.0f // Move up-down
                        },
                        (Vector3){
                            GetMouseDelta().x * 0.05f, // Rotation: yaw
                            GetMouseDelta().y * 0.05f, // Rotation: pitch
                            0.0f                       // Rotation: roll
                        },
                        GetMouseWheelMove() * 2.0f); // Move to target (zoom)
    }

    CloseWindow();

    return 0;
}
